{"version":3,"sources":["../../src/lib/codemirror.component.ts","../../src/lib/codemirror.module.ts"],"names":["normalizeLineEndings","str","replace","CodemirrorComponent","_differs","_ngZone","this","className","name","autoFocus","preserveScrollPosition","cursorActivity","EventEmitter","focusChange","scroll","drop","value","disabled","isFocused","onChange","_","onTouched","Object","defineProperty","prototype","_options","_differ","find","create","_codeMirror","CodeMirror","require","ngAfterViewInit","_this","ref","runOutsideAngular","codeMirror","codeMirrorGlobal","fromTextArea","nativeElement","on","cm","run","cursorActive","scrollChanged","bind","focusChanged","change","codemirrorValueChanged","e","dropFiles","setValue","ngDoCheck","changes","diff","forEachChangedItem","option","setOptionIfChanged","key","currentValue","forEachAddedItem","forEachRemovedItem","ngOnDestroy","toTextArea","origin","getValue","optionName","newValue","setOption","focused","emit","getScrollInfo","writeValue","cur","prevScrollPosition","scrollTo","left","top","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","KeyValueDiffers","NgZone","Input","Output","ViewChild","static","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  NgZone,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n  Editor,\n  EditorChangeLinkedList,\n  EditorFromTextArea,\n  ScrollInfo,\n} from 'codemirror';\n\nfunction normalizeLineEndings(str: string): string {\n  if (!str) {\n    return str;\n  }\n  return str.replace(/\\r\\n|\\r/g, '\\n');\n}\n\ndeclare var require: any;\ndeclare var CodeMirror: any;\n\n@Component({\n  selector: 'ngx-codemirror',\n  template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CodemirrorComponent),\n      multi: true,\n    },\n  ],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CodemirrorComponent\n  implements AfterViewInit, OnDestroy, ControlValueAccessor, DoCheck {\n  /* class applied to the created textarea */\n  @Input() className = '';\n  /* name applied to the created textarea */\n  @Input() name = 'codemirror';\n  /* autofocus setting applied to the created textarea */\n  @Input() autoFocus = false;\n  /**\n   * set options for codemirror\n   * @link http://codemirror.net/doc/manual.html#config\n   */\n  @Input()\n  set options(value: { [key: string]: any }) {\n    this._options = value;\n    if (!this._differ && value) {\n      this._differ = this._differs.find(value).create();\n    }\n  }\n  /* preserve previous scroll position after updating value */\n  @Input() preserveScrollPosition = false;\n  /* called when the text cursor is moved */\n  @Output() cursorActivity = new EventEmitter<Editor>();\n  /* called when the editor is focused or loses focus */\n  @Output() focusChange = new EventEmitter<boolean>();\n  /* called when the editor is scrolled */\n  // tslint:disable-next-line:no-output-native\n  @Output() scroll = new EventEmitter<ScrollInfo>();\n  /* called when file(s) are dropped */\n  // tslint:disable-next-line:no-output-native\n  @Output() drop = new EventEmitter<[Editor, DragEvent]>();\n  @ViewChild('ref', { static: true }) ref!: ElementRef;\n  value = '';\n  disabled = false;\n  isFocused = false;\n  codeMirror?: EditorFromTextArea;\n  /**\n   * either global variable or required library\n   */\n  private _codeMirror: any;\n\n  private _differ?: KeyValueDiffer<string, any>;\n  private _options: any;\n\n  constructor(private _differs: KeyValueDiffers, private _ngZone: NgZone) {}\n\n  get codeMirrorGlobal(): any {\n    if (this._codeMirror) {\n      return this._codeMirror;\n    }\n\n    this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : require('codemirror');\n    return this._codeMirror;\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.ref) {\n      return;\n    }\n    // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n    this._ngZone.runOutsideAngular(() => {\n      this.codeMirror = this.codeMirrorGlobal.fromTextArea(\n        this.ref.nativeElement,\n        this._options,\n      ) as EditorFromTextArea;\n      this.codeMirror.on('cursorActivity', cm =>\n        this._ngZone.run(() => this.cursorActive(cm)),\n      );\n      this.codeMirror.on('scroll', this.scrollChanged.bind(this));\n      this.codeMirror.on('blur', () =>\n        this._ngZone.run(() => this.focusChanged(false)),\n      );\n      this.codeMirror.on('focus', () =>\n        this._ngZone.run(() => this.focusChanged(true)),\n      );\n      this.codeMirror.on(\n        'change',\n        (cm: Editor, change: EditorChangeLinkedList) =>\n          this._ngZone.run(() => this.codemirrorValueChanged(cm, change)),\n      );\n      this.codeMirror.on(\n        'drop',\n        (cm: Editor, e: DragEvent) => {\n          this._ngZone.run(() => this.dropFiles(cm, e));\n        }\n      );\n      this.codeMirror.setValue(this.value);\n    });\n  }\n  ngDoCheck(): void {\n    if (!this._differ) {\n      return;\n    }\n    // check options have not changed\n    const changes = this._differ.diff(this._options);\n    if (changes) {\n      changes.forEachChangedItem(option =>\n        this.setOptionIfChanged(option.key, option.currentValue),\n      );\n      changes.forEachAddedItem(option =>\n        this.setOptionIfChanged(option.key, option.currentValue),\n      );\n      changes.forEachRemovedItem(option =>\n        this.setOptionIfChanged(option.key, option.currentValue),\n      );\n    }\n  }\n  ngOnDestroy(): void {\n    // is there a lighter-weight way to remove the cm instance?\n    if (this.codeMirror) {\n      this.codeMirror.toTextArea();\n    }\n  }\n  codemirrorValueChanged(cm: Editor, change: EditorChangeLinkedList): void {\n    if (change.origin !== 'setValue') {\n      this.value = cm.getValue();\n      this.onChange(this.value);\n    }\n  }\n  setOptionIfChanged(optionName: string, newValue: any): void {\n    if (!this.codeMirror) {\n      return;\n    }\n\n    // cast to any to handle strictly typed option names\n    // could possibly import settings strings available in the future\n    this.codeMirror.setOption(optionName as any, newValue);\n  }\n  focusChanged(focused: boolean): void {\n    this.onTouched();\n    this.isFocused = focused;\n    this.focusChange.emit(focused);\n  }\n  scrollChanged(cm: Editor): void {\n    this.scroll.emit(cm.getScrollInfo());\n  }\n  cursorActive(cm: Editor): void {\n    this.cursorActivity.emit(cm);\n  }\n  dropFiles(cm: Editor, e: DragEvent): void {\n    this.drop.emit([cm, e]);\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value === null || value === undefined) {\n      return;\n    }\n    if (!this.codeMirror) {\n      this.value = value;\n      return;\n    }\n    const cur = this.codeMirror.getValue();\n    if (\n      value !== cur &&\n      normalizeLineEndings(cur) !== normalizeLineEndings(value)\n    ) {\n      this.value = value;\n      if (this.preserveScrollPosition) {\n        const prevScrollPosition = this.codeMirror.getScrollInfo();\n        this.codeMirror.setValue(this.value);\n        this.codeMirror.scrollTo(\n          prevScrollPosition.left,\n          prevScrollPosition.top,\n        );\n      } else {\n        this.codeMirror.setValue(this.value);\n      }\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.setOptionIfChanged('readOnly', this.disabled);\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  private onChange = (_: any) => {};\n  /** Implemented as part of ControlValueAccessor. */\n  private onTouched = () => {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { CodemirrorComponent } from './codemirror.component';\n\n@NgModule({\n  exports: [CodemirrorComponent],\n  declarations: [CodemirrorComponent],\n})\nexport class CodemirrorModule {}\n"]}